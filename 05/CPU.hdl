// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=ainput);
    Not(in=instruction[15], out=isains);
    Or(a=isains, b=instruction[5], out=isloada);
    // A Register
    Register(in=ainput, load=isloada, out=aoutput,out[0..14]=addressM);
    // A or M 
    And(a=instruction[12], b=instruction[15], out=shouldUseInM);
    Mux16(a=aoutput, b=inM, sel=shouldUseInM, out=aluinput1);
    // D Register
    And(a=instruction[15], b=instruction[4], out=shouldWriteD);
    Register(in=aluout, load=shouldWriteD, out=doutput);
    And(a=instruction[15], b=instruction[11], out=zxinput);
    And(a=instruction[15], b=instruction[10], out=nxinput);
    And(a=instruction[15], b=instruction[9], out=zyinput);
    And(a=instruction[15], b=instruction[8], out=nyinput);
    And(a=instruction[15], b=instruction[7], out=finput);
    And(a=instruction[15], b=instruction[6], out=noinput);
    ALU(x=doutput, y=aluinput1, zx=zxinput, nx=nxinput, zy=zyinput, ny=nyinput, f=finput, no=noinput, out=aluout,out=outM, zr=iszero, ng=isneg);
    And(a=instruction[15], b=instruction[3], out=writeM);

    // jump
    Xor(a=iszero, b=isneg, out=xor1);
    Not(in=xor1, out=isPos);
    And(a=instruction[0], b=isPos, out=isjump1);
    And(a=instruction[1], b=iszero, out=isjump2);
    And(a=instruction[2], b=isneg, out=isjump3);
    Or(a=isjump1, b=isjump2, out=jump12);
    Or(a=jump12, b=isjump3, out=shouldjump1);
    And(a=shouldjump1, b=instruction[15], out=shouldjump);
    Mux16(a=outpc, b=aoutput, sel=shouldjump, out=inputpc);
    Not(in=shouldjump, out=shouldinc);
    PC(in=inputpc, load=shouldjump, inc=shouldinc, reset=reset, out[0..14]=pc,out=outpc);
}